import sqlite3
import os

DB_PATH = "database/database.db"

def connect_db():
    return sqlite3.connect(DB_PATH)

def init_db():
    os.makedirs("database", exist_ok=True)
    with connect_db() as db:
        cursor = db.cursor()
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS products (
                product_id INTEGER PRIMARY KEY,
                name TEXT,
                category TEXT NOT NULL,
                price REAL NOT NULL
            )
        """)
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS customers (
                customer_id INTEGER PRIMARY KEY,
                first_name TEXT NOT NULL,
                last_name TEXT NOT NULL,
                email TEXT NOT NULL UNIQUE
            )
        """)
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS orders (
                order_id INTEGER PRIMARY KEY AUTOINCREMENT,
                customer_id INTEGER NOT NULL,
                product_id INTEGER NOT NULL,
                quantity INTEGER NOT NULL,
                order_date DATE NOT NULL,
                FOREIGN KEY (customer_id) REFERENCES customers(customer_id),
                FOREIGN KEY (product_id) REFERENCES products(product_id)
            )
        """)
        db.commit()

def seed_data():
    with connect_db() as db:
        cursor = db.cursor()

        # –û—á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        cursor.execute("DELETE FROM orders")
        cursor.execute("DELETE FROM customers")
        cursor.execute("DELETE FROM products")

        # –ü—Ä–æ–¥—É–∫—Ç—ã
        products = [
            (1, 'Lenovo44', '–ù–æ—É—Ç–±—É–∫–∏', 1500),
            (2, 'AsusA15', '–ù–æ—É—Ç–±—É–∫–∏', 2000),
            (3, 'iphone16pro', '–¢–µ–ª–µ—Ñ–æ–Ω—ã', 900),
            (4, 'samsungs24', '–¢–µ–ª–µ—Ñ–æ–Ω—ã', 540),
            (5, 'ipadair2', '–ü–ª–∞–Ω—à–µ—Ç—ã', 600),
            (6, 'ipad 6 air', '–ü–ª–∞–Ω—à–µ—Ç—ã', 230),
        ]
        cursor.executemany("INSERT INTO products VALUES (?, ?, ?, ?)", products)

        # –ö–ª–∏–µ–Ω—Ç—ã
        customers = [
            (1, '–ê–Ω–¥—Ä–µ–π', '–í–∞—Å–∏–ª–∏–π', 'andre12@gmail.com'),
            (2, '–ò–ª—å—è', '–ê–Ω–∞—Ç–æ–ª–∏–π', 'ilyaanatoli23@gmail.com'),
            (3, '–õ–µ–≤', '–¢–æ–ª—Å—Ç–æ–π', 'levtolstov34@gmail.com'),
            (4, '–ú–∞–∫—Å', '–°–µ—Ä–≥–µ–µ–≤–∏—á', 'maksserhi23@gmail.com'),
            (5, '–ï–≥–æ—Ä', '–ì–µ–Ω–∞–¥–∏–µ–≤–∏—á', 'egorgenadiev56@gmail.com'),
        ]
        cursor.executemany("INSERT INTO customers VALUES (?, ?, ?, ?)", customers)

        db.commit()

def insert_orders():
    orders = [
        (1, 1, 1, "2024-05-01"),
        (2, 2, 2, "2024-05-03"),
        (1, 3, 1, "2024-05-04"),
        (3, 1, 3, "2024-05-05"),
        (4, 4, 1, "2024-05-06"),
        (5, 6, 2, "2024-05-07"),
        (2, 5, 1, "2024-05-08")
    ]
    with connect_db() as db:
        cursor = db.cursor()
        cursor.executemany("""
            INSERT INTO orders (customer_id, product_id, quantity, order_date)
            VALUES (?, ?, ?, ?)
        """, orders)
        print("‚úÖ –ó–∞–∫–∞–∑—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

def total_sales():
    with connect_db() as db:
        cursor = db.cursor()
        cursor.execute("""
            SELECT SUM(p.price * o.quantity)
            FROM orders o
            JOIN products p ON o.product_id = p.product_id
        """)
        result = cursor.fetchone()[0]
        print(f"üí∞ –û–±—â–∏–π –æ–±—ä–µ–º –ø—Ä–æ–¥–∞–∂: {result:.2f} –≥—Ä–Ω")

def orders_per_customer():
    with connect_db() as db:
        cursor = db.cursor()
        cursor.execute("""
            SELECT c.first_name, c.last_name, COUNT(o.order_id)
            FROM customers c
            JOIN orders o ON c.customer_id = o.customer_id
            GROUP BY c.customer_id
        """)
        for row in cursor.fetchall():
            print(f"{row[0]} {row[1]}: {row[2]} –∑–∞–∫–∞–∑(–æ–≤)")

def average_order_value():
    with connect_db() as db:
        cursor = db.cursor()
        cursor.execute("""
            SELECT AVG(p.price * o.quantity)
            FROM orders o
            JOIN products p ON o.product_id = p.product_id
        """)
        result = cursor.fetchone()[0]
        print(f"üì¶ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {result:.2f} –≥—Ä–Ω")

def most_popular_category():
    with connect_db() as db:
        cursor = db.cursor()
        cursor.execute("""
            SELECT p.category, COUNT(*) as cnt
            FROM orders o
            JOIN products p ON o.product_id = p.product_id
            GROUP BY p.category
            ORDER BY cnt DESC
            LIMIT 1
        """)
        row = cursor.fetchone()
        if row:
            print(f"üî• –°–∞–º–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {row[0]} ({row[1]} –∑–∞–∫–∞–∑–æ–≤)")

def product_count_by_category():
    with connect_db() as db:
        cursor = db.cursor()
        cursor.execute("""
            SELECT category, COUNT(*) FROM products GROUP BY category
        """)
        for row in cursor.fetchall():
            print(f"{row[0]}: {row[1]} —Ç–æ–≤–∞—Ä–æ–≤")

def update_prices():
    with connect_db() as db:
        cursor = db.cursor()
        cursor.execute("""
            UPDATE products
            SET price = price * 1.10
            WHERE LOWER(category) = '—Ç–µ–ª–µ—Ñ–æ–Ω—ã'
        """)
        print("üîß –¶–µ–Ω—ã –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ã —É–≤–µ–ª–∏—á–µ–Ω—ã –Ω–∞ 10%.")

def show_products():
    with connect_db() as db:
        cursor = db.cursor()
        cursor.execute("SELECT * FROM products")
        for row in cursor.fetchall():
            print(row)


def menu():
    actions = {
        "1": ("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑—ã", insert_orders),
        "2": ("–û–±—â–∏–π –æ–±—ä–µ–º –ø—Ä–æ–¥–∞–∂", total_sales),
        "3": ("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞", orders_per_customer),
        "4": ("–°—Ä–µ–¥–Ω–∏–π —á–µ–∫", average_order_value),
        "5": ("–ü–æ–ø—É–ª—è—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–æ–≤", most_popular_category),
        "6": ("–¢–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", product_count_by_category),
        "7": ("–£–≤–µ–ª–∏—á–∏—Ç—å —Ü–µ–Ω—ã –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ã –Ω–∞ 10%", update_prices),
    }

    while True:
        print("\n===== –ú–ï–ù–Æ =====")
        for k, (desc, _) in actions.items():
            print(f"{k}. {desc}")
        print("0. –í—ã–π—Ç–∏")
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()
        if choice == "0":
            break
        elif choice in actions:
            actions[choice][1]()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

def ask_commit():
    choice = input("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è? (y/n): ").strip().lower()
    if choice == 'y':
        print("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    else:
        with connect_db() as db:
            db.rollback()
        print("üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.")

if __name__ == "__main__":
    init_db()
    seed_data()
    menu()
    ask_commit()
